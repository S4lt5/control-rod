/* eslint-disable @next/next/no-img-element */
import { type NextPage } from 'next';
import Head from 'next/head';
import { type SyntheticEvent, useState } from 'react';
import {
  createFindingFilterFn,
  disclosure,
  disclosureStatus,
  type finding,
} from '~/shared/finding';
import { createCompareFn } from '~/shared/helpers';
import { api } from '~/utils/api';
import { useRouter } from 'next/router';

const NewDisclosure: NextPage = () => {
  const router = useRouter();
  const { data: findings, status: findingsStatus } =
    api.findings.getFindings.useQuery();
  const { data: disclosures, status: disclosureQueryStatus } =
    api.disclosures.getDisclosures.useQuery();
  const addDisclosure = api.disclosures.newDisclosure.useMutation();
  const [findingSearch, setFindingSearch] = useState(''); //used to filter the dropdown findings list
  const [newDisclosure, setNewDisclosure] = useState<disclosure | null>(null); //the disclosure that is being created. if null, prompts for a finding to start

  function selectHost(e: SyntheticEvent, f: finding): void {
    if (newDisclosure) {
      //if it exists, remove it
      if (newDisclosure.hosts.includes(f.host)) {
        newDisclosure.hosts = newDisclosure.hosts.filter((h) => h != f.host);
      } else {
        // or add it
        newDisclosure.hosts.push(f.host);
      }

      setNewDisclosure({ ...newDisclosure });
    }
    e.preventDefault();
  }
  return (
    <>
      <Head>
        <title>Create New Disclosure</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
        <div className="flex h-full w-full flex-col text-white">
          <form className="flex-auto">
            <p className="prose prose-xl my-4 text-white ">
              Create New Disclosure
            </p>
            <div className="mb-6">
              <p className={`my-2 ${newDisclosure ? 'hidden' : ''}`}>
                ➡ Step 1: Choose a source finding.
              </p>
              <span className="relative w-full">
                <input
                  aria-label="search"
                  type="search"
                  id="search"
                  disabled={newDisclosure ? true : false}
                  placeholder={newDisclosure ? '' : 'Search findings'}
                  className={`w-full appearance-none rounded border ${
                    newDisclosure ? 'border-white' : 'border-transparent'
                  } bg-gray-900 px-2 py-3 pl-10 leading-normal text-white transition focus:border-gray-400 focus:outline-none`}
                  value={findingSearch}
                  onChange={(e) => setFindingSearch(e.target.value)}
                />
                <div
                  className={`min-h-12 m-x-10 max-h-36 w-full overflow-y-scroll bg-slate-400  ${
                    newDisclosure ? 'hidden' : ''
                  }`}
                >
                  <table className="w-full table-fixed">
                    <tbody>
                      {findings &&
                        disclosures &&
                        findings
                          .filter((f: finding) => {
                            return !disclosures.some(
                              (d) =>
                                d.name == f.name &&
                                d.hosts.some((h) => h == f.host)
                            );
                          })
                          .filter(createFindingFilterFn(findingSearch))
                          .sort(createCompareFn('severity', 'desc'))
                          .map((f) => (
                            <tr
                              className=" border-b-2 border-gray-900 bg-slate-700 hover:bg-white/20"
                              key={f.id}
                            >
                              <td>
                                <button
                                  onClick={(e) => {
                                    const d: disclosure = new disclosure(
                                      f.name,
                                      new Array<string>(f.host),
                                      f.template,
                                      disclosureStatus.disclosed,
                                      '',
                                      f.description,
                                      f.severity,
                                      f.reference
                                    );
                                    setNewDisclosure(d);
                                    setFindingSearch(d.name);
                                    e.preventDefault(); // don't submit the form because we clicked here
                                  }}
                                >
                                  {f.name}
                                </button>
                              </td>
                              <td>{f.host}</td>
                            </tr>
                          ))}
                    </tbody>
                  </table>
                </div>
                <div
                  className="search-icon absolute"
                  style={{ top: '0.1rem', left: '.8rem' }}
                >
                  <svg
                    className={`${
                      !newDisclosure ? 'hidden' : ''
                    } h-6 w-6 hover:cursor-pointer`}
                    onClick={(e) => {
                      setNewDisclosure(null); //remove currently selected disclosure
                      setFindingSearch('');
                      e.preventDefault();
                    }}
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 130.2 130.2"
                  >
                    <line
                      stroke="#D06079"
                      strokeWidth={15}
                      stroke-linecap="round"
                      strokeMiterlimit={10}
                      x1={10.0}
                      y1={10.0}
                      x2={90.0}
                      y2={90.0}
                    />
                    <line
                      stroke="#D06079"
                      strokeWidth={15}
                      stroke-linecap="round"
                      strokeMiterlimit={10}
                      x1={10}
                      y1={90}
                      x2={90}
                      y2={10}
                    />
                  </svg>

                  <svg
                    className={`pointer-events-none h-4 w-4 fill-current text-white ${
                      newDisclosure ? 'hidden' : ''
                    }`}
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                  >
                    <path d="M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"></path>
                  </svg>
                </div>
              </span>{' '}
            </div>
            <p className={`my-2 ${!newDisclosure ? 'hidden' : ''}`}>
              ➡ Step 2: Choose related hosts, and submit.
            </p>
            {newDisclosure && newDisclosure.hosts && (
              <div
                className={`min-h-12 m-x-10 max-h-64 w-full overflow-y-scroll bg-slate-400  ${
                  newDisclosure ? '' : 'hidden'
                }`}
              >
                <table className="w-full table-fixed">
                  <tbody>
                    {findings &&
                      disclosures &&
                      findings
                        .filter(
                          (f) =>
                            !disclosures.some((d) =>
                              d.hosts.some((dh) => dh == f.host)
                            )
                        )
                        .filter((f) => f.name == newDisclosure.name)

                        .map((f) => (
                          <tr
                            className=" border-b-2 border-gray-900 bg-slate-700 hover:bg-white/20"
                            key={f.id}
                            onClick={(e) => {
                              selectHost(e, f);
                            }}
                          >
                            <td className="shrink">
                              <img
                                alt="select/deselect"
                                className="h-6 w-6"
                                src={
                                  newDisclosure.hosts &&
                                  newDisclosure.hosts.includes(f.host)
                                    ? '/cb-checked.svg'
                                    : '/cb-empty.svg'
                                }
                              />
                            </td>
                            <td>{f.name}</td>
                            <td>{f.host}</td>
                          </tr>
                        ))}
                  </tbody>
                </table>
              </div>
            )}

            <button
              type="submit"
              className={`${
                newDisclosure &&
                newDisclosure.hosts &&
                newDisclosure.hosts.length > 0
                  ? ''
                  : 'hidden'
              }   my-4 inline-flex items-center rounded bg-indigo-400 p-2 align-middle text-white hover:bg-indigo-200`}
              onClick={(e) => {
                e.preventDefault();
                if (!newDisclosure) {
                  throw new Error('foo');
                }
                void addDisclosure
                  .mutateAsync({
                    name: newDisclosure.name,
                    description: newDisclosure.description,
                    hosts: newDisclosure.hosts,
                    severity: newDisclosure.severity,
                    references: newDisclosure.references,
                    template: newDisclosure.template,
                  })
                  .catch(() => {
                    console.log('oh noes');
                  })
                  .then(() => {
                    void router
                      .push('/disclosures')
                      .catch(() => {
                        console.log("Couldn't navigate to disclosures.");
                      })
                      .then();
                  });
              }}
            >
              Submit
            </button>
          </form>
        </div>
      </div>
    </>
  );
};

export default NewDisclosure;
