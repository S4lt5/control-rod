// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Disclosure {
    id          String              @id @default(cuid())
    name        String
    hosts       String              @db.VarChar(1000) //split by \n
    template    String
    timestamp   DateTime            @default(now())
    status      disclosureStatus    @default(started)
    ticketURL   String
    history     DisclosureHistory[]
    description String              @db.VarChar(3000)
    severity    severity
    references  String              @db.VarChar(1000) // split by \n
}

model DisclosureHistory {
    id        String           @id @default(cuid())
    timestamp DateTime         @default(now())
    status    disclosureStatus

    Disclosure   Disclosure? @relation(fields: [disclosureId], references: [id])
    disclosureId String?
}

enum disclosureStatus {
    started
    disclosed
    regression
    uncertain
    remediated
    invalid
    deleted
}

enum severity {
    info
    low
    medium
    unknown
    high
    critical
}

model Finding {
    id               String    @id @default(cuid())
    extractedResults String    @db.VarChar(500)
    host             String
    matchedAt        String    @db.VarChar(1000)
    template         String
    timestamp        String
    description      String    @db.VarChar(3000)
    name             String
    severity         severity
    tags             String
    references       String    @db.VarChar(1000) //split by \n    
    queryTimestamp   DateTime? @default(now())
    disclosureStatus String? //not actually saved/used -- used to store at runtime cross referenced disclosures by loose key (host in hosts, name == name)

    @@index([severity(sort: Desc)])
}
